# -*- coding: utf-8 -*-
"""project_akhir_dico_heart_attack.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wCs33db9SeNmfn2_mesowbE8dN8KFBOV
"""

from google.colab import drive
drive.mount('/gdrive')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

# load the dataset
data = "/gdrive/MyDrive/dataset/heart_2020_cleaned.csv"

df = pd.read_csv(data,error_bad_lines=False)
df.head()

# df[[i for i in list(df.columns) if i not in bin_enc]]

# Kolom Binary Encoding

bin_enc = ['HeartDisease', 'Smoking', 'AlcoholDrinking', 'Stroke',
       'DiffWalking',
       'PhysicalActivity',
       'Asthma', 'KidneyDisease', 'SkinCancer']

# kolom onehotman encoding

onehot = ['GenHealth','Race']

df['MentalHealth'].value_counts()

# Preprocessing Data

def preprocess_data(df1):

    # Binary Eencoding
    for i in bin_enc:
      df1[i] = df1[i].replace({'Yes' : 1, 'No' : 0})

    df1['Sex'] = df1['Sex'].replace({'Male' : 1, 'Female' : 0})

    df1['AgeCategory'] = df1['AgeCategory'].replace({"18-24": 1.0, "25-29": 2.0, "30-34": 3.0, "35-39": 4.0, "40-44": 5.0,
                                  "45-49": 6.0, "50-54": 7.0, "55-59": 8.0, "60-64": 9.0, "65-69": 10.0,
                                  "70-74": 11.0, "75-79": 12.0, "80 or older": 13.0})


    # One Hotman Encoding

    for i in onehot:
      unique_vals = df1[i].unique()
      df1[i].replace(to_replace=unique_vals,
                value= list(range(len(unique_vals))),
                inplace=True)
    df1['Diabetic'] = df1['Diabetic'].replace({'Yes' : 1, 'No' : 0,'No, borderline diabetes' : 0 , 'Yes (during pregnancy)' : 1 })
  
    df1['MentalHealth'].astype('int64')

df1 = df.copy()
preprocess_data(df1)

df1.head()

# df_num = df1.select_dtypes(include=[np.float]).columns
# df_num

# change to int64

flt_col = ['PhysicalHealth', 'MentalHealth', 'AgeCategory', 'SleepTime']

df1[flt_col] = df1[flt_col].astype('int64')

df1.info()

df1.describe()

df_sehat = df1[df1['HeartDisease'].isin([1])]
df_sakit = df1[df1['HeartDisease'].isin([0])]
print(df_sehat.shape)
print(df_sakit.shape)

(df_sehat.shape)[0]

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.axis('equal')
labels = ['No','Yes']
data = df1.HeartDisease.value_counts()

ax.pie(data,labels=labels, autopct='%.0f%%')
plt.show()

data = df1.HeartDisease.value_counts()
data
df1.head()

fig, ax = plt.subplots(4, 4, figsize=(14, 12))
sns.countplot(data=df1, x='Smoking', hue='HeartDisease', ax=ax[0][0])
sns.countplot(data=df1, x='AlcoholDrinking', hue='HeartDisease', ax=ax[0][1])
sns.countplot(data=df1, x='Stroke', hue='HeartDisease', ax=ax[0][2])
sns.countplot(data=df1, x='MentalHealth', hue='HeartDisease', ax=ax[0][3])
sns.countplot(data=df1, x='DiffWalking', hue='HeartDisease', ax=ax[1][0])
sns.countplot(data=df1, x='Sex', hue='HeartDisease', ax=ax[1][1])
sns.countplot(data=df1, x='AgeCategory', hue='HeartDisease', ax=ax[1][2])
sns.countplot(data=df1, x='Race', hue='HeartDisease', ax=ax[1][3])
sns.countplot(data=df1, x='Diabetic', hue='HeartDisease', ax=ax[2][0])
sns.countplot(data=df1, x='PhysicalActivity', hue='HeartDisease', ax=ax[2][1])
sns.countplot(data=df1, x='GenHealth', hue='HeartDisease', ax=ax[2][2])
sns.countplot(data=df1, x='SleepTime', hue='HeartDisease', ax=ax[2][3])
sns.countplot(data=df1, x='Asthma', hue='HeartDisease', ax=ax[3][0])
sns.countplot(data=df1, x='KidneyDisease', hue='HeartDisease', ax=ax[3][1])
sns.countplot(data=df1, x='SkinCancer', hue='HeartDisease', ax=ax[3][2])

plt.tight_layout()
plt.show()

df1.columns

"""Split Data"""

x = df1.drop('HeartDisease', axis=1)
y = df1.HeartDisease

from sklearn.model_selection import train_test_split
import random

x_train, x_test, y_train, y_test = train_test_split( x, y, test_size=0.3, random_state = 42)

"""Pembuatan Model

Logistic Regression
"""

from sklearn.linear_model import LogisticRegression

log_model = LogisticRegression().fit(x_train,y_train)

print('Model Logistic Regression yang terbentuk adalah: \n',log_model)

from sklearn.metrics import classification_report

y_train_pred = log_model.predict(x_train)
print('Classification Report Training Model (Logistic Regression) : \n', classification_report(y_train, y_train_pred))

from sklearn.metrics import confusion_matrix, classification_report

# Form confusion matrix as a DataFrame
confusion_matrix_df = pd.DataFrame((confusion_matrix(y_train, y_train_pred)), ('No Sick', 'Sick'), ('No sick', 'sick'))

# Plot confusion matrix
plt.figure()
heatmap = sns.heatmap(confusion_matrix_df, annot=True, annot_kws={'size': 14}, fmt='d', cmap='YlGnBu')
heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)
heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)

plt.title('Confusion Matrix for Training Model\n(Logistic Regression)', fontsize=18, color='darkblue')
plt.ylabel('True label', fontsize=14)
plt.xlabel('Predicted label', fontsize=14)
plt.tight_layout()
plt.show()

# Predict
y_test_pred = log_model.predict(x_test)
# Print classification report 
print('Classification Report Testing Model (Logistic Regression):')
print(classification_report(y_test, y_test_pred))

# Plot confusion matrix
plt.figure()
heatmap = sns.heatmap(confusion_matrix_df, annot=True, annot_kws={'size': 14}, fmt='d', cmap='YlGnBu')
heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)
heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)

plt.title('Confusion Matrix for Testing Model\n(Logistic Regression)\n', fontsize=18, color='darkblue')
plt.ylabel('True label', fontsize=14)
plt.xlabel('Predicted label', fontsize=14)
plt.tight_layout()
plt.show()

"""Random Forest Classifier"""

from sklearn.ensemble import RandomForestClassifier
#Train the model
rdf_model = RandomForestClassifier().fit(x_train, y_train)
print(rdf_model)

y_train_pred = rdf_model.predict(x_train)
print('Classification Report Training Model (Random Forest Classifier):')
print(classification_report(y_train, y_train_pred))

# Plot confusion matrix
plt.figure()
heatmap = sns.heatmap(confusion_matrix_df, annot=True, annot_kws={'size': 14}, fmt='d', cmap='YlGnBu')
heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)
heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)

plt.title('Confusion Matrix for Training Model\n(Random Forest)', fontsize=18, color='darkblue')
plt.ylabel('True label', fontsize=14)
plt.xlabel('Predicted label', fontsize=14)
plt.tight_layout()
plt.show()

# Predict
y_test_pred = rdf_model.predict(x_test)
# Print classification report 
print('Classification Report Testing Model (Random Forest Classifier):')
print(classification_report(y_test, y_test_pred))

# Plot confusion matrix
plt.figure()
heatmap = sns.heatmap(confusion_matrix_df, annot=True, annot_kws={'size': 14}, fmt='d', cmap='YlGnBu')
heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)
heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)

plt.title('Confusion Matrix for Testing Model\n(Random Forest)\n', fontsize=18, color='darkblue')
plt.ylabel('True label', fontsize=14)
plt.xlabel('Predicted label', fontsize=14)
plt.tight_layout()
plt.show()

"""Gradient Boost Classifier"""

from sklearn.ensemble import GradientBoostingClassifier
#Train the model
gbt_model = GradientBoostingClassifier().fit(x_train, y_train)
print(gbt_model)

# Predict
y_train_pred = gbt_model.predict(x_train)
# Print classification report 
print('Classification Report Training Model (Gradient Boosting):')
print(classification_report(y_train, y_train_pred))

# Plot confusion matrix
plt.figure()
heatmap = sns.heatmap(confusion_matrix_df, annot=True, annot_kws={'size': 14}, fmt='d', cmap='YlGnBu')
heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)
heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)

plt.title('Confusion Matrix for Training Model\n(Gradient Boosting)', fontsize=18, color='darkblue')
plt.ylabel('True label', fontsize=14)
plt.xlabel('Predicted label', fontsize=14)
plt.tight_layout()
plt.show()

y_test_pred = gbt_model.predict(x_test)
# Print classification report 
print('Classification Report Testing Model (Gradient Boosting):')
print(classification_report(y_test, y_test_pred))

# Plot confusion matrix
plt.figure()
heatmap = sns.heatmap(confusion_matrix_df, annot=True, annot_kws={'size': 14}, fmt='d', cmap='YlGnBu')
heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)
heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)

plt.title('Confusion Matrix for Testing Model\n(Gradient Boosting)', fontsize=18, color='darkblue')
plt.ylabel('True label', fontsize=14)
plt.xlabel('Predicted label', fontsize=14)
plt.tight_layout()
plt.show()

"""Kesimpulan"""

import pickle

#Save Model
pickle.dump(gbt_model, open('best_model_churn.pkl', 'wb'))

print(gbt_model)

